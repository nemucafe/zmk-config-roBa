#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// #includeのあとのあたりにスクロール量変更の定義を追記
// def80
#define ZMK_POINTING_DEFAULT_SCRL_VAL 50

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    //automouse-layer = <8>;
    scroll-layers = <9>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &bt BT_SEL 0>;
            label = "TO_LAYER_0";
        };

        layer_4_bt1: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 4 &bt BT_SEL 1>;
            label = "NEW_MACRO";
        };

        layer_4_bt2: layer_4_bt2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 4 &bt BT_SEL 2>;
            label = "LAYER_4_BT2";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // combosやmacrosと同じ階層に以下のbihaviorsを追記
        // スクロール方向を逆にしたい場合は <&msc SCRL_DOWN> と <&msc SCRL_UP> を入れ替えてください

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MAC_DEF {
            bindings = <
&kp Q             &kp W             &kp E         &kp R         &kp T                                                                        &kp Y        &kp U  &lt 9 I    &kp O              &kp P
&mt LCTRL A       &mt LEFT_SHIFT S  &kp D         &kp F         &kp G        &kp LS(LG(C_AC_DESKTOP_SHOW_ALL_WINDOWS))      &kp MINUS        &kp H        &kp J  &kp K      &mt RIGHT_SHIFT L  &lt 8 SEMICOLON
&mt LEFT_SHIFT Z  &kp X             &kp C         &kp V         &kp B        &kp LEFT_BRACE                                 &kp RIGHT_BRACE  &kp N        &kp M  &kp COMMA  &kp DOT            &lt 9 SLASH
&kp DELETE        &kp LEFT_WIN      &kp LEFT_ALT  &mt LCMD TAB  &lt 2 SPACE  &lt 10 LANG2                                   &lt 3 LANG2      &lt 1 ENTER                                       &kp BACKSPACE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MAC_NUM {
            bindings = <
&kp N1             &kp N2  &kp N3  &kp N4  &kp N5                                                      &kp N6          &kp N7          &kp N8        &kp N9           &kp N0
&trans             &trans  &trans  &trans  &trans  &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS      &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&mt LEFT_SHIFT F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                                      &kp F7  &kp F8          &kp F9          &kp F10       &kp F11          &kp F12
&trans             &trans  &trans  &trans  &trans  &trans                                      &trans  &trans                                                         &trans
            >;
        };

        MAC_SYMBOL {
            bindings = <
&kp EXCLAMATION          &kp AT_SIGN  &kp HASH       &kp DOLLAR        &kp PERCENT                                                       &kp CARET         &kp AMPERSAND     &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                &trans       &trans         &kp EQUAL         &kp PLUS      &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE         &kp MINUS         &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES
&mt LEFT_SHIFT CAPSLOCK  &trans       &kp LESS_THAN  &kp GREATER_THAN  &kp ASTERISK  &kp LEFT_PARENTHESIS         &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp GRAVE             &kp PIPE
&trans                   &trans       &trans         &trans            &trans        &trans                       &trans                 &trans                                                                       &kp BACKSLASH
            >;
        };

        MAC_NAVI {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                     &kp LA(LC(U))               &kp LA(LC(E))           &kp LC(LA(R))      &kp LA(LC(T))            &kp LA(LC(I))
&trans  &trans  &trans  &trans  &trans  &trans      &kp LA(LC(BACKSPACE))  &kp LA(LC(LG(LEFT_ARROW)))  &kp LC(LA(LEFT_ARROW))  &kp LC(LA(ENTER))  &kp LC(LA(RIGHT_ARROW))  &kp LA(LC(LG(RIGHT_ARROW)))
&trans  &trans  &trans  &trans  &trans  &trans      &kp LA(LC(C))          &kp LA(LC(J))               &kp LA(LC(D))           &kp LA(LC(F))      &kp LA(LC(G))            &kp LA(LC(K))
&trans  &trans  &trans  &trans  &trans  &trans      &trans                 &trans                                                                                          &trans
            >;
        };

        WIN_DEF {
            bindings = <
&kp Q             &kp W             &kp E         &kp R          &kp T                                             &kp Y        &kp U  &lt 9 I    &kp O              &kp P
&mt LCTRL A       &mt LEFT_SHIFT S  &kp D         &kp F          &kp G        &kp LG(TAB)         &kp MINUS        &kp H        &kp J  &kp K      &mt RIGHT_SHIFT L  &lt 8 SEMICOLON
&mt LEFT_SHIFT Z  &kp X             &kp C         &kp V          &kp B        &kp LEFT_BRACE      &kp RIGHT_BRACE  &kp N        &kp M  &kp COMMA  &kp DOT            &lt 9 SLASH
&kp DELETE        &kp LEFT_WIN      &kp LEFT_ALT  &mt LCTRL TAB  &lt 6 SPACE  &lt 10 LANG2        &lt 7 LANG2      &lt 5 ENTER                                       &kp BACKSPACE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        WIN_NUM {
            bindings = <
&kp N1             &kp N2  &kp N3  &kp N4  &kp N5                      &kp N6          &kp N7          &kp N8        &kp N9           &kp N0
&trans             &trans  &trans  &trans  &trans  &trans      &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&mt LEFT_SHIFT F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6      &kp F7  &kp F8          &kp F9          &kp F10       &kp F11          &kp F12
&trans             &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                         &trans
            >;
        };

        WIN_SYMBOL {
            bindings = <
&kp EXCLAMATION          &kp AT_SIGN  &kp HASH       &kp DOLLAR        &kp PERCENT                                                       &kp CARET         &kp AMPERSAND     &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                &trans       &trans         &kp EQUAL         &kp PLUS      &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE         &kp MINUS         &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES
&mt LEFT_SHIFT CAPSLOCK  &trans       &kp LESS_THAN  &kp GREATER_THAN  &kp ASTERISK  &kp LEFT_PARENTHESIS         &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp GRAVE             &kp PIPE
&trans                   &trans       &trans         &trans            &trans        &trans                       &trans                 &trans                                                                       &kp BACKSLASH
            >;
        };

        WIN_NAVI {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans                  &trans                  &kp LG(RG(UP_ARROW))    &trans                   &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LG(LS(LEFT_ARROW))  &kp LG(RG(LEFT_ARROW))  &kp LG(RG(DOWN_ARROW))  &kp LG(RG(RIGHT_ARROW))  &kp LG(LS(RIGHT_ARROW))
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                  &trans                  &trans                  &trans                   &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                                                           &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans    &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &mkp MB4  &mkp MB1  &mkp MB3  &mkp MB2  &mkp MB5
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans    &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SYSTEM {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &to_layer_0   &layer_4_bt1  &layer_4_bt2  &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
